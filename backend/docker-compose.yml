version: "3.9"

services:
  auth-minio:
    container_name: ${AUTH_MINIO_NAME}
    image: minio/minio:latest
    command: server --console-address ":${AUTH_MINIO_PORT_CONTAINER_2}" /data/
    ports:
      - ${AUTH_MINIO_PORT_HOST_1}:${AUTH_MINIO_PORT_CONTAINER_1}
      - ${AUTH_MINIO_PORT_HOST_2}:${AUTH_MINIO_PORT_CONTAINER_2}
    environment:
      MINIO_ROOT_USER: ${AUTH_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${AUTH_MINIO_ROOT_PASSWORD}
    volumes:
      - auth_minio:/data
    networks:
      - network

  auth-db:
    container_name: ${AUTH_DB_NAME}
    image: postgres:17-alpine
    env_file: .env
    environment:
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_DB: ${AUTH_DB_NAME}
    ports:
      - ${AUTH_DB_PORT_HOST}:${AUTH_DB_PORT_CONTAINER}
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    command:
      - -p ${AUTH_DB_PORT_CONTAINER}
    networks:
      - network

  ai-minio:
    container_name: ${AI_MINIO_NAME}
    image: minio/minio:latest
#    post_start:
#      - command: mc config host add minio http://ai_minio:${AI_MINIO_PORT_CONTAINER_1} ${AI_MINIO_ROOT_USER} ${AI_MINIO_ROOT_PASSWORD} && mc admin user add set ${AI_MINIO_ACCESS_KEY} ${AI_MINIO_SECRET_KEY} && mc admin policy attach set readwrite --user=${AI_MINIO_ACCESS_KEY}
    command: server --console-address ":${AI_MINIO_PORT_CONTAINER_2}" /data/ --address ":${AI_MINIO_PORT_CONTAINER_1}"
    ports:
      - ${AI_MINIO_PORT_HOST_1}:${AI_MINIO_PORT_CONTAINER_1}
      - ${AI_MINIO_PORT_HOST_2}:${AI_MINIO_PORT_CONTAINER_2}
    environment:
      MINIO_ROOT_USER: ${AI_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${AI_MINIO_ROOT_PASSWORD}
    volumes:
      - ai_minio:/data
    networks:
      - network

  ai-minio-setup:
    image: minio/mc:latest
    depends_on:
      - ai-minio
    entrypoint: >
      /bin/sh -c "
      echo ${AI_MINIO_ROOT_USER};
      echo ${AI_MINIO_ROOT_PASSWORD};
      /usr/bin/mc config host add myminio http://${AI_MINIO_NAME}:${AI_MINIO_PORT_CONTAINER_1}/ ${AI_MINIO_ROOT_USER} ${AI_MINIO_ROOT_PASSWORD};
      /usr/bin/mc admin user add myminio ${AI_MINIO_ACCESS_KEY} ${AI_MINIO_SECRET_KEY};
      /usr/bin/mc admin policy attach myminio readwrite --user=${AI_MINIO_ACCESS_KEY};
      exit 0;
      "
    networks:
      - network

  ai-db:
    container_name: ${AI_DB_NAME}
    image: postgres:17-alpine
    env_file: .env
    environment:
      POSTGRES_PASSWORD: ${AI_DB_PASSWORD}
      POSTGRES_USER: ${AI_DB_USER}
      POSTGRES_DB: ${AI_DB_NAME}
    ports:
      - ${AI_DB_PORT_HOST}:${AI_DB_PORT_CONTAINER}
    volumes:
      - ai_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    command:
      - -p ${AI_DB_PORT_CONTAINER}
    networks:
      - network

  auth-service:
    container_name: ${AUTH_SERVICE_NAME}
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    env_file:
      - .env
    environment:
      - AUTH_DB_HOST=${AUTH_DB_NAME}
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_NAME}
    ports:
      - ${AUTH_SERVICE_PORT_HOST}:${AUTH_SERVICE_PORT_CONTAINER}
    depends_on:
      - auth-db
      - auth-minio
    networks:
      - network

  ai-service:
    container_name: ${AI_SERVICE_NAME}
    build:
      context: .
      dockerfile: services/ai_service/Dockerfile
    env_file:
      - .env
    environment:
      - AI_DB_HOST=${AI_DB_NAME}
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_NAME}
      - AI_SERVICE_HOST=${AI_SERVICE_NAME}
    ports:
      - ${AI_SERVICE_PORT_HOST}:${AI_SERVICE_PORT_CONTAINER}
    depends_on:
      - ai-db
      - ai-minio
      - auth-service
      - ai-minio-setup
    networks:
      - network

volumes:
  auth_db_data:
  auth_minio:
  ai_db_data:
  ai_minio:

networks:
  network:
    name: microservices_network